# This is a basic workflow to help you get started with Actions

name: Build Binaries

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    tags: 
      - 'v*'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-linux:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        
      - name: Setup GCC
        uses: egor-tensin/setup-gcc@v1

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.5

      - name: Install Build Packages
        run: sudo apt-get install pkg-config build-essential mesa-common-dev libglu1-mesa-dev

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.4
        
      - name: Install Node Packages
        run: yarn install
        
      - name: Build Binary
        run: npx nodegui-packer --pack dist
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./deploy/linux/build/KeylightController/Keylight_Controller-x86_64.AppImage
          asset_name: Keylight_Controller-x86_64.AppImage
          asset_content_type: application/octet-stream
